#include <vector>
#include <string>
using std::vector, std::string;

class RgbCol{
public:
	uint8_t r,g,b;
	RgbCol(uint8_t r,uint8_t g,uint8_t b):r(r),g(g),b(b){}
};

RgbCol XtermToHex[256]{
	RgbCol(0,0,0),
	RgbCol(128,0,0),
	RgbCol(0,128,0),
	RgbCol(128,128,0),
	RgbCol(0,0,128),
	RgbCol(128,0,128),
	RgbCol(0,128,128),
	RgbCol(192,192,192),
	RgbCol(128,128,128),
	RgbCol(255,0,0),
	RgbCol(0,255,0),
	RgbCol(255,255,0),
	RgbCol(0,0,255),
	RgbCol(255,0,255),
	RgbCol(0,255,255),
	RgbCol(255,255,255),
	RgbCol(0,0,0),
	RgbCol(0,0,95),
	RgbCol(0,0,135),
	RgbCol(0,0,175),
	RgbCol(0,0,215),
	RgbCol(0,0,255),
	RgbCol(0,95,0),
	RgbCol(0,95,95),
	RgbCol(0,95,135),
	RgbCol(0,95,175),
	RgbCol(0,95,215),
	RgbCol(0,95,255),
	RgbCol(0,135,0),
	RgbCol(0,135,95),
	RgbCol(0,135,135),
	RgbCol(0,135,175),
	RgbCol(0,135,215),
	RgbCol(0,135,255),
	RgbCol(0,175,0),
	RgbCol(0,175,95),
	RgbCol(0,175,135),
	RgbCol(0,175,175),
	RgbCol(0,175,215),
	RgbCol(0,175,255),
	RgbCol(0,215,0),
	RgbCol(0,215,95),
	RgbCol(0,215,135),
	RgbCol(0,215,175),
	RgbCol(0,215,215),
	RgbCol(0,215,255),
	RgbCol(0,255,0),
	RgbCol(0,255,95),
	RgbCol(0,255,135),
	RgbCol(0,255,175),
	RgbCol(0,255,215),
	RgbCol(0,255,255),
	RgbCol(95,0,0),
	RgbCol(95,0,95),
	RgbCol(95,0,135),
	RgbCol(95,0,175),
	RgbCol(95,0,215),
	RgbCol(95,0,255),
	RgbCol(95,95,0),
	RgbCol(95,95,95),
	RgbCol(95,95,135),
	RgbCol(95,95,175),
	RgbCol(95,95,215),
	RgbCol(95,95,255),
	RgbCol(95,135,0),
	RgbCol(95,135,95),
	RgbCol(95,135,135),
	RgbCol(95,135,175),
	RgbCol(95,135,215),
	RgbCol(95,135,255),
	RgbCol(95,175,0),
	RgbCol(95,175,95),
	RgbCol(95,175,135),
	RgbCol(95,175,175),
	RgbCol(95,175,215),
	RgbCol(95,175,255),
	RgbCol(95,215,0),
	RgbCol(95,215,95),
	RgbCol(95,215,135),
	RgbCol(95,215,175),
	RgbCol(95,215,215),
	RgbCol(95,215,255),
	RgbCol(95,255,0),
	RgbCol(95,255,95),
	RgbCol(95,255,135),
	RgbCol(95,255,175),
	RgbCol(95,255,215),
	RgbCol(95,255,255),
	RgbCol(135,0,0),
	RgbCol(135,0,95),
	RgbCol(135,0,135),
	RgbCol(135,0,175),
	RgbCol(135,0,215),
	RgbCol(135,0,255),
	RgbCol(135,95,0),
	RgbCol(135,95,95),
	RgbCol(135,95,135),
	RgbCol(135,95,175),
	RgbCol(135,95,215),
	RgbCol(135,95,255),
	RgbCol(135,135,0),
	RgbCol(135,135,95),
	RgbCol(135,135,135),
	RgbCol(135,135,175),
	RgbCol(135,135,215),
	RgbCol(135,135,255),
	RgbCol(135,175,0),
	RgbCol(135,175,95),
	RgbCol(135,175,135),
	RgbCol(135,175,175),
	RgbCol(135,175,215),
	RgbCol(135,175,255),
	RgbCol(135,215,0),
	RgbCol(135,215,95),
	RgbCol(135,215,135),
	RgbCol(135,215,175),
	RgbCol(135,215,215),
	RgbCol(135,215,255),
	RgbCol(135,255,0),
	RgbCol(135,255,95),
	RgbCol(135,255,135),
	RgbCol(135,255,175),
	RgbCol(135,255,215),
	RgbCol(135,255,255),
	RgbCol(175,0,0),
	RgbCol(175,0,95),
	RgbCol(175,0,135),
	RgbCol(175,0,175),
	RgbCol(175,0,215),
	RgbCol(175,0,255),
	RgbCol(175,95,0),
	RgbCol(175,95,95),
	RgbCol(175,95,135),
	RgbCol(175,95,175),
	RgbCol(175,95,215),
	RgbCol(175,95,255),
	RgbCol(175,135,0),
	RgbCol(175,135,95),
	RgbCol(175,135,135),
	RgbCol(175,135,175),
	RgbCol(175,135,215),
	RgbCol(175,135,255),
	RgbCol(175,175,0),
	RgbCol(175,175,95),
	RgbCol(175,175,135),
	RgbCol(175,175,175),
	RgbCol(175,175,215),
	RgbCol(175,175,255),
	RgbCol(175,215,0),
	RgbCol(175,215,95),
	RgbCol(175,215,135),
	RgbCol(175,215,175),
	RgbCol(175,215,215),
	RgbCol(175,215,255),
	RgbCol(175,255,0),
	RgbCol(175,255,95),
	RgbCol(175,255,135),
	RgbCol(175,255,175),
	RgbCol(175,255,215),
	RgbCol(175,255,255),
	RgbCol(215,0,0),
	RgbCol(215,0,95),
	RgbCol(215,0,135),
	RgbCol(215,0,175),
	RgbCol(215,0,215),
	RgbCol(215,0,255),
	RgbCol(215,95,0),
	RgbCol(215,95,95),
	RgbCol(215,95,135),
	RgbCol(215,95,175),
	RgbCol(215,95,215),
	RgbCol(215,95,255),
	RgbCol(215,135,0),
	RgbCol(215,135,95),
	RgbCol(215,135,135),
	RgbCol(215,135,175),
	RgbCol(215,135,215),
	RgbCol(215,135,255),
	RgbCol(215,175,0),
	RgbCol(215,175,95),
	RgbCol(215,175,135),
	RgbCol(215,175,175),
	RgbCol(215,175,215),
	RgbCol(215,175,255),
	RgbCol(215,215,0),
	RgbCol(215,215,95),
	RgbCol(215,215,135),
	RgbCol(215,215,175),
	RgbCol(215,215,215),
	RgbCol(215,215,255),
	RgbCol(215,255,0),
	RgbCol(215,255,95),
	RgbCol(215,255,135),
	RgbCol(215,255,175),
	RgbCol(215,255,215),
	RgbCol(215,255,255),
	RgbCol(255,0,0),
	RgbCol(255,0,95),
	RgbCol(255,0,135),
	RgbCol(255,0,175),
	RgbCol(255,0,215),
	RgbCol(255,0,255),
	RgbCol(255,95,0),
	RgbCol(255,95,95),
	RgbCol(255,95,135),
	RgbCol(255,95,175),
	RgbCol(255,95,215),
	RgbCol(255,95,255),
	RgbCol(255,135,0),
	RgbCol(255,135,95),
	RgbCol(255,135,135),
	RgbCol(255,135,175),
	RgbCol(255,135,215),
	RgbCol(255,135,255),
	RgbCol(255,175,0),
	RgbCol(255,175,95),
	RgbCol(255,175,135),
	RgbCol(255,175,175),
	RgbCol(255,175,215),
	RgbCol(255,175,255),
	RgbCol(255,215,0),
	RgbCol(255,215,95),
	RgbCol(255,215,135),
	RgbCol(255,215,175),
	RgbCol(255,215,215),
	RgbCol(255,215,255),
	RgbCol(255,255,0),
	RgbCol(255,255,95),
	RgbCol(255,255,135),
	RgbCol(255,255,175),
	RgbCol(255,255,215),
	RgbCol(255,255,255),
	RgbCol(8,8,8),
	RgbCol(18,18,18),
	RgbCol(28,28,28),
	RgbCol(38,38,38),
	RgbCol(48,48,48),
	RgbCol(58,58,58),
	RgbCol(68,68,68),
	RgbCol(78,78,78),
	RgbCol(88,88,88),
	RgbCol(98,98,98),
	RgbCol(18,18,18),
	RgbCol(118,118,118),
	RgbCol(128,128,128),
	RgbCol(138,138,138),
	RgbCol(148,148,148),
	RgbCol(158,158,158),
	RgbCol(168,168,168),
	RgbCol(178,178,178),
	RgbCol(188,188,188),
	RgbCol(198,198,198),
	RgbCol(28,28,28),
	RgbCol(218,218,218),
	RgbCol(228,228,228),
	RgbCol(238,238,238)
};

uint16_t abs(int16_t n){ 
	int16_t const mask = n >> (sizeof(int16_t) * 8 - 1); 
	return ((n + mask) ^ mask);
} 

uint16_t diff(int16_t a,int16_t b){
	return abs(a-b);
}

uint8_t HexToXterm(RgbCol color){
	uint8_t result=0;
	RgbCol currCol=XtermToHex[0];
	uint16_t currDiff=diff(color.r,currCol.r)+diff(color.g,currCol.g)+diff(color.b,currCol.b);
	uint16_t leastDiff=currDiff;

	for (int col=1;col<256;col++){
		currCol=XtermToHex[col];
		currDiff=diff(color.r,currCol.r)+diff(color.g,currCol.g)+diff(color.b,currCol.b);
		if (currDiff<leastDiff){
			leastDiff=currDiff;
			result=col;
		}
	}
	return result;
}

#undef map
#undef string